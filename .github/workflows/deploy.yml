name: Deploy Docker to VPS

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        # Build with both latest and commit SHA tags to force fresh build
        docker build --no-cache --pull \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${{ github.sha }} \
          --build-arg VERSION=1.3.1 \
          -t sl-portfolio:latest -t sl-portfolio:${{ github.sha }} .
        docker save sl-portfolio:latest | gzip > sl-portfolio.tar.gz
        
    - name: Upload Docker image to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "sl-portfolio.tar.gz,docker-compose.prod.yml"
        target: "/var/www/portfolio/"
        
    - name: Deploy Docker container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        envs: VITE_GITHUB_TOKEN,VITE_GITHUB_USERNAME,VITE_GITHUB_EXCLUDE_REPOS
        script: |
          cd /var/www/portfolio
          
          echo "Loading new Docker image..."
          docker load < sl-portfolio.tar.gz
          
          echo "Available Docker images after load:"
          docker images sl-portfolio
          
          # Backup current deployment info
          if docker ps -q -f name=sl-portfolio-prod; then
            echo "Backing up current container..."
            docker tag sl-portfolio:latest sl-portfolio:backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Stop and remove existing container - comprehensive cleanup
          echo "Stopping and removing existing containers..."
          docker-compose -f docker-compose.prod.yml down || true
          
          # Force remove any existing sl-portfolio-prod container
          if docker ps -a -q -f name=sl-portfolio-prod; then
            echo "Found existing sl-portfolio-prod container, removing it..."
            docker stop sl-portfolio-prod || true
            docker rm -f sl-portfolio-prod || true
          fi
          
          # Clean up any remaining sl-portfolio processes (but not the newly loaded image)
          echo "Cleaning up any remaining processes..."
          docker ps -a | grep sl-portfolio | awk '{print $1}' | head -1 | xargs -r docker rm -f || true
          
          # Verify clean state (but continue if some containers remain)
          echo "Verifying clean state..."
          if docker ps -a -q -f name=sl-portfolio-prod; then
            echo "Note: sl-portfolio-prod container still exists, but continuing with deployment..."
            docker ps -a -f name=sl-portfolio-prod
          fi
          
          # Set environment variables for the deployment
          export VITE_GITHUB_TOKEN="$VITE_GITHUB_TOKEN"
          export VITE_GITHUB_USERNAME="$VITE_GITHUB_USERNAME"
          export VITE_GITHUB_EXCLUDE_REPOS="$VITE_GITHUB_EXCLUDE_REPOS"
          
          # Start new container with force recreation
          echo "Starting new container with force recreation..."
          docker-compose -f docker-compose.prod.yml up -d --force-recreate --remove-orphans
          
          # Wait for container to be healthy
          echo "Waiting for container to be healthy..."
          timeout 60 bash -c 'until docker ps -q -f name=sl-portfolio-prod -f health=healthy | grep -q .; do sleep 2; done' || {
            echo "Container failed to start properly"
            docker logs sl-portfolio-prod
            exit 1
          }
          
          # Test the deployment by checking container status
          sleep 10
          echo "Checking deployment status..."
          if docker ps | grep -q "sl-portfolio-prod"; then
            echo "✅ Deployment successful! Portfolio container is running on port 3001"
            echo "Container status:"
            docker ps | grep sl-portfolio-prod
          else
            echo "❌ Deployment failed - container not running"
            echo "All containers:"
            docker ps -a
            echo "Container logs:"
            docker logs sl-portfolio-prod || echo "No logs available"
            exit 1
          fi
          
          # Clean up uploaded tar file
          rm -f sl-portfolio.tar.gz
          
          echo "🚀 Docker deployment completed successfully!" 