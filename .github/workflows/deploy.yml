name: Deploy Docker to VPS

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t sl-portfolio:latest .
        docker save sl-portfolio:latest | gzip > sl-portfolio.tar.gz
        
    - name: Upload Docker image to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "sl-portfolio.tar.gz,docker-compose.prod.yml"
        target: "/var/www/portfolio/"
        
    - name: Deploy Docker container
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /var/www/portfolio
          
          # Load the new Docker image
          docker load < sl-portfolio.tar.gz
          
          # Backup current deployment info
          if docker ps -q -f name=sl-portfolio-prod; then
            echo "Backing up current container..."
            docker tag sl-portfolio:latest sl-portfolio:backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Stop and remove existing container
          docker-compose -f docker-compose.prod.yml down || true
          
          # Clean up old images (keep last 2)
          docker images sl-portfolio --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep -E "(backup-|latest)" | tail -n +3 | awk '{print $3}' | xargs docker rmi || true
          
          # Start new container
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for container to be healthy
          echo "Waiting for container to be healthy..."
          timeout 60 bash -c 'until docker ps -q -f name=sl-portfolio-prod -f health=healthy | grep -q .; do sleep 2; done' || {
            echo "Container failed to start properly"
            docker logs sl-portfolio-prod
            exit 1
          }
          
          # Test the deployment - check main page since it's working
          sleep 10
          echo "Testing deployment..."
          if curl -f http://localhost:3001/; then
            echo "✅ Deployment successful! Portfolio is running on port 3001"
          else
            echo "❌ Deployment failed - main page not accessible"
            echo "Container status:"
            docker ps
            echo "Container logs:"
            docker logs sl-portfolio-prod
            exit 1
          fi
          
          # Clean up uploaded tar file
          rm -f sl-portfolio.tar.gz
          
          echo "🚀 Docker deployment completed successfully!" 