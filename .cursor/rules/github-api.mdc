
# GitHub API Integration Rules

## Service Architecture
- Use class-based service pattern for GitHub API
- Centralize all GitHub API calls in `src/services/github.ts`
- Implement proper error handling with specific error types
- Use React hooks for state management in `src/hooks/useGitHub.ts`

## Authentication & Security
- Use GitHub Personal Access Token for authentication
- Store token in environment variables (`VITE_GITHUB_TOKEN`)
- Implement rate limiting awareness
- Never expose sensitive data in frontend bundle

## Data Flow
1. Service layer handles API communication
2. Hooks layer manages React state and UI integration
3. Components consume hooks for data display
4. Types define all API response structures

## Error Handling
- Implement retry logic for failed requests
- Provide meaningful error messages to users
- Handle rate limiting gracefully
- Log errors appropriately

## Repository Processing
- Filter out forks, archived, and disabled repositories
- Detect technologies from repository languages
- Sort repositories by creation date or stars
- Support excluding specific repositories via configuration

## Caching Strategy
- Implement basic caching to avoid unnecessary API calls
- Use localStorage for client-side caching when appropriate
- Consider cache invalidation strategies

## Example Service Pattern:
```typescript
class GitHubApiService {
  private baseUrl = 'https://api.github.com';
  private token: string;
  
  constructor() {
    this.token = import.meta.env.VITE_GITHUB_TOKEN;
  }
  
  async fetchRepositories(): Promise<GitHubRepository[]> {
    // Implementation with proper error handling
  }
}
```


@github-service-template.ts
