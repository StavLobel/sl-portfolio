# TypeScript & React Standards

## Component Structure
- Use functional components with hooks only
- Export components as `const ComponentName = () => {}`
- Define props interface: `interface ComponentNameProps {}`
- Use default exports for components
- Keep components under 200 lines (split if larger)

## TypeScript Rules
- Maintain 100% type safety - no `any` types
- Use proper TypeScript interfaces for all props and API responses
- Import types from `@/types` when available
- Use type inference where possible, explicit types when needed

## React Best Practices
- Use React hooks (`useState`, `useEffect`, `useContext`) for state
- Prefer local state over global state when possible
- Use React Query for API data fetching and caching
- Implement proper cleanup in useEffect hooks
- Use React.memo for performance optimization when needed

## Styling
- Use Tailwind CSS classes only - no custom CSS unless absolutely necessary
- Follow mobile-first responsive design (`sm:`, `md:`, `lg:`, `xl:`)
- Use consistent spacing scale (4, 8, 12, 16, 20, 24, 32, etc.)
- Maintain dark/light mode compatibility

## Error Handling
- Always implement loading and error states for async operations
- Use try-catch blocks for API calls
- Provide user-friendly error messages
- Log errors appropriately (console.warn in development, proper logging in production)

@component-template.tsx
