
# Git Workflow Standards

## Branch Strategy
- **main**: Development branch with CI testing
- **prod**: Production branch triggering automatic deployment
- Feature branches for larger changes (optional)

## Commit Conventions
Follow conventional commits specification:
- `feat:` for new features
- `fix:` for bug fixes  
- `docs:` for documentation changes
- `style:` for formatting changes
- `refactor:` for code refactoring
- `test:` for adding tests
- `chore:` for maintenance tasks

## Commit Message Format
```
type(scope): brief description

- Detailed explanation if needed
- Use bullet points for multiple changes
- Include breaking change notes

BREAKING CHANGE: description if applicable
```

## Development Workflow
1. Work on `main` branch for most changes
2. Test changes locally with `npm run dev`
3. Run quality checks: `npm run check-all`
4. Commit with conventional message format
5. Push to `main` for CI validation

## Production Deployment
1. Ensure `main` branch is stable and tested
2. Merge or rebase `main` into `prod` branch
3. Push `prod` branch to trigger automatic deployment
4. Monitor GitHub Actions for deployment status

## Quality Gates
- All commits must pass TypeScript type checking
- ESLint validation required before push
- No console.log statements in production code
- Test build locally before pushing to prod

## Version Management
- Use semantic versioning (major.minor.patch)
- Tag releases with `npm run version:patch/minor/major`
- Update CHANGELOG.md with notable changes
- Coordinate version bumps with production deployments

## Best Practices
- Write descriptive commit messages
- Keep commits atomic and focused
- Squash commits when appropriate
- Use meaningful branch names for features
- Regularly sync with remote branches

- Add new subtasks as they're identified
- Keep task descriptions clear and actionable
